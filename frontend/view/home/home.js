/**
 * R√©cup√®re les articles depuis une API, cr√©e des instances d'articles,
 * puis les affiche sur la page.
 */

const fetchData = async () => {
    try {
        // Envoie une requ√™te GET pour r√©cup√©rer les donn√©es des articles
        const response = await axios.get("http://localhost:4000/api/article/");
        // console.log(response.data);
        // Stocke les donn√©es renvoy√©es par l'API
        data = response.data;
        ArticleManager.sortByRecent(data);
        console.log("üöÄ ~ file: home.js:16 ~ fetchData ~ data:", data);

        // Appel de la fonction pour afficher les articles sur la page `displayArticle`
        displayArticle(data);
    } catch (error) {
        console.log(error);
    }
};

fetchData();

/**
 * Affiche les articles sur la page.
 * @param {Array} data - Tableau d'objets d'articles renvoyer par l'API
 */
const displayArticle = (data) => {
    // Parcourt chaque article et l'affiche sur la page
    for (const arrayArticle of data) {
        // Cr√©e une instance de l'objet Article √† partir des donn√©es du tableau d'objets envoyer par l'API
        let article = new Article(arrayArticle);
        let trie = new ArticleManager(article);

        // G√©n√®re le HTML pour chaque article et l'ajoute au conteneur
        document.querySelector(".container").innerHTML += `
                <div class="col-12 mt-5">
                    <div class="card article">
                    <div class="card-header ">
                    <h5 class="card-title d-flex justify-content-between">${
                        article.title
                    }<span class="publication-date">${article.getFormattedDate()}</span></h5>
                        </div>
                        <img src="http://localhost:4000/${article.image}" class="card-img-top">
                        <span class="fa-stack fa-2x addFavorite" data-id=${article.id}>
                            <i class="fas fa-star fa-stack-1x"></i>
                            <i class="far fa-star fa-stack-1x"></i>
                            </span>
                            <div class="card-body">
                            <p class="card-text">${article.content}</p>
                        </div>
                    </div>
                </div>
                `;
    }

    // S√©lectionne tous les √©l√©ments ayant la classe "addFavorite"
    document.querySelectorAll(".addFavorite").forEach((star) => {
        // V√©rifie si l'article li√© √† cette √©toile est marqu√© comme favori dans le localStorage
        if (localStorage.getItem(`article-${star.dataset.id}`) === "favorite") {
            // Si l'article est un favori, active visuellement l'√©toile
            star.classList.add("activated");
        }

        // Ajoute un √©couteur d'√©v√©nement pour d√©tecter les clics sur l'√©toile
        star.addEventListener("click", () => {
            // Si l'√©toile est activ√©e (article est un favori)
            /*
            l'intention est de v√©rifier si la classe activated existe dans l'attribut className de l'√©l√©ment star.

            Si activated est effectivement une classe de star, alors indexOf("activated") renverra un indice (un nombre) qui est >= 0 (parce que les indices commencent √† 0 pour la premi√®re position).

            Si activated n'est pas une classe de star, alors indexOf("activated") renverra -1.

            Ainsi, if (star.className.indexOf("activated") != -1) v√©rifie si l'√©l√©ment star a la classe activated. Si c'est le cas, le bloc de code √† l'int√©rieur de cette instruction if sera ex√©cut√©. Si ce n'est pas le cas, ce bloc sera ignor√©. */
            if (star.className.indexOf("activated") != -1) {
                // Retire l'article des favoris
                removeFavorites(star.dataset.id);
                // D√©sactive visuellement l'√©toile
                star.classList.remove("activated");
                // Supprime l'√©tat de favori de cet article du localStorage
                localStorage.removeItem(`article-${star.dataset.id}`);
            } else {
                // Si l'√©toile n'est pas activ√©e (article n'est pas un favori)
                // Ajoute l'article aux favoris
                addFavorites(star.dataset.id);
                // Active visuellement l'√©toile
                star.classList.add("activated");
                // Sauvegarde l'√©tat de favori de cet article dans le localStorage
                localStorage.setItem(`article-${star.dataset.id}`, "favorite");
            }
        });
    });
};
